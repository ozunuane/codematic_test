name: Build gcp-test Environment

on:
  push:
    branches:
      - '*'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME}} # Add your cluster name here.
  GCP_ZONE: ${{ secrets.GKE_ZONE }} # Add your cluster zone here.



jobs:
  terraform:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
         credentials_json: '${{ secrets.GKE_SA }}'
         gcp_private_key_id: '${{ secrets.TF_VAR_GCP_PRIVATE_KEY_ID }}'
         gcp_project_id: '${{ secrets.TF_VAR_GCP_PROJECT_ID }}'
         private_key: '${{ secrets.TF_VAR_GCP_PRIVATE_KEY_ID }}'
         client_email: '${{ secrets.TF_VAR_GCP_CLIENT_EMAIL }}'
         client_id: '${{ secrets.TF_VAR_GCP_CLIENT_ID }}'
         client_x509_cert_url: '${{ secrets.TF_VAR_GCP_CLIENT_X509_CERT_URL }}'


      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init 
        id: init
        run: terraform init --backend-config=test.conf


      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=main.tfvars -no-color
        continue-on-error: true


      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
