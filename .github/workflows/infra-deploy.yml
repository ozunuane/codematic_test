name: Build GCP CODEMATIC Test Environment

on:
  push:
    branches:
      - 'deploy-plan'

env:
  PROJECT_ID: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GCP_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_SA: ${{ secrets.GKE_SA }}
  TF_VAR_gcp_private_key_id: ${{ secrets.TF_VAR_GCP_PRIVATE_KEY_ID }}
  TF_VAR_gcp_project_id: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
  TF_VAR_gcp_private_key: ${{ secrets.TF_VAR_GCP_PRIVATE_KEY }}
  TF_VAR_gcp_client_email: ${{ secrets.TF_VAR_GCP_CLIENT_EMAIL }}
  TF_VAR_gcp_client_id: ${{ secrets.TF_VAR_GCP_CLIENT_ID }}
  TF_VAR_gcp_client_x509_cert_url: ${{ secrets.TF_VAR_GCP_CLIENT_X509_CERT_URL }}
   
jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GKE_SA }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init --backend-config=environments/test.conf

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          echo "$GKE_SA" > gcp_key.json 
          export GOOGLE_APPLICATION_CREDENTIALS=gcp_key.json
          terraform plan --var-file=environments/test.tfvars -input=false
        continue-on-error: false

      - name: Comment on Pull Request with Terraform Results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style');
            });

            const output = `
            #### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              });


  terraform-apply:
    if: github.ref == 'refs/heads/deploy-infra'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GKE_SA }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init --backend-config=environments/test.conf

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: plan
        run: |
          echo "$GKE_SA" > gcp_key.json 
          export GOOGLE_APPLICATION_CREDENTIALS=gcp_key.json
          terraform apply -var-file=environments/test.tfvars --auto-approve  -input=false
        continue-on-error: false
